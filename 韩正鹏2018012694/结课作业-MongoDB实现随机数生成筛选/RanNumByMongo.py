##!/usr/bin/python3
"""
  Author:  ZhengPeng.Han
  Purpose: Generate random data,stores and screening them by MongoDB.
  Created: 21/6/2020
"""
import random
import string
import pymongo

def dataSampling(datatype, datarange, num, strlen=8):
    '''
    :Description:Using the generator generates a random data given set of conditions
    :param datatype: The type of data which include int float and string
    :param datarange: iterable data set
    :param num: Input parameters that means The final result of the number of elements
    :param strlen:The length of input strings
    :return: a dataset
    '''
    try:
        if (datatype is int):#类型参数是int时
            for i in range(num):#结果要求有几个元素就进行几次循环
                it = iter(datarange)#实现迭代器
                item = random.randint(next(it), next(it))#利用next关键字获取datarange的两个元素也即生成边界并随机生成数据
                yield item  #使用yield关键字以实现生成器
        elif (datatype is str):#类型参数是string时
            for i in range(num):#结果要求有几个元素就进行几次循环
                item = ''.join(random.SystemRandom().choice(datarange) for _ in range(strlen))
                yield item  #使用yield关键字以实现生成器
        elif (datatype is float):#类型参数是float时，与int大同小异
            for i in range(num):#结果要求有几个元素就进行几次循环
                it = iter(datarange)#实现迭代器
                item = random.uniform(next(it), next(it))#利用next关键字获取datarange的两个元素也即边界，使用uniform随机生成浮点数
                yield item  #使用yield关键字以实现生成器
    except ValueError:
        print("生成错误：传入参数无效")
    except TypeError:
        print("生成错误：类型错误，参数可能无法迭代")
    except Exception as e:
        print("生成错误"+e)


def dataScreening(data,*args):
    '''
        :param datatype: The type of data which include int float and string
        :param datarange: Given conditions used to filter data
        :param data:The data used for filtering which generated by dataSampling
        :return: a dataset
    '''
    scrresult = set() #用作输出筛选结果的集合
    try:
        for it in data:
            if (type(it) is int):#判断数据是int型时
                cond = iter(args)#利用可变参数args承载筛选条件
                if(next(cond) <= it and next(cond) >= it):
                    scrresult.add(it)
            elif (type(it) is str):#判断数据是str型时
                for condstr in args:#利用可变参数args承载筛选条件
                    if(condstr in it):
                        scrresult.add(it)
            elif (type(it) is float):#判断数据是float型时
                cond = iter(args)#利用可变参数args承载筛选条件
                if(next(cond) <= it and next(cond) >= it):
                    scrresult.add(it)
    except ValueError:
        print("筛选错误：传入参数无效")
    except TypeError:
        print("筛选错误：类型错误，参数可能无法迭代")
    except NameError:
        print("筛选错误：未声明/初始化对象")
    except Exception as e:
        print("筛选错误："+e)
    return scrresult

def apply():
    try:
      myclient = pymongo.MongoClient("mongodb://localhost:27017")  # 创建Mongoclient对象也即客户端，它基本啥都能干
      mydb = myclient["runoobdb"]          # 创建一个数据库，如果已有该名字的库则将其打开
      dblist = myclient.list_database_names()  # 读取MongoDB中所有的数据库并判断某库是否存在
      if "runoobdb" in dblist:
            print("该数据库已存在！")
      mycol = mydb["sites"]                # 创建一个集合，如果已有该名字的集合则将其打开
      collist = mydb.list_collection_names()  # 读取数据库runoobdb中所有的集合并判断某集合是否存在
      if "sites" in collist:
            print("该集合已存在！")
      #输入string类型参数时
      a = dataSampling(str, string.ascii_letters + string.digits + "@#$!", 5)#将生成的数据存在a中
      x = mycol.delete_many({})            #先清理一下mycol集合
      for i in range(5):                   #生成5个数据故循环5次
        mydict = {'No': 0, 'value': "nu"}  #创建一个字典来存放数据并将其插入数据库中
        mydict['No']=i                     #序号方便区分各个数据
        mydict['value']=next(a)            #通过迭代获得各个数据的值，字典可以取各种各样的值
        temp=mycol.insert_one(mydict)      #执行插入操作
      print("string类型的生成结果为：")
      for x in mycol.find():               # 输出集合中所有数据
          print(x)
      #以‘a’为条件筛选
      myquery = {"value": {"$regex": "a"}} #设置筛选条件，正则表达式$regex可筛选包含特定值的元素
      mydoc = mycol.find(myquery)          #执行筛选操作
      cou=mydoc.count()                    #查看筛选出了几个元素
      if (cou==0):                         #没有筛选出来
          print("未找到满足要求的数据！")
      else:                                #有筛选出来
        print("string类型的以a为条件的筛选结果为：")
        for x in mydoc:                    #将筛选出来的数据输出
            print(x)
      x = mycol.delete_many({})            #将集合清空，为下一个操作做准备
      print("str类型执行结束，集合中共", x.deleted_count, "个文档已清空删除")
      print("\n")

      #输入int类型参数时
      b = dataSampling(int,(0,100),5)
      x = mycol.delete_many({})
      for i in range(5):
          mydict = {'No': 0, 'value': "nu"}
          mydict['No'] = i
          mydict['value'] = next(b)
          temp = mycol.insert_one(mydict)
      print("int类型的生成结果为：")
      for x in mycol.find():
          print(x)
      #按10到90筛选数据
      myquery = {"value": {"$gt": 10,"$lt":90}}#利用find函数实现10<value<90的条件
      mydoc = mycol.find(myquery)
      cou = mydoc.count()
      if (cou == 0):
          print("未找到满足要求的数据")
      else:
          print("int类型的以10到90为条件的筛选结果为：")
          for x in mydoc:
              print(x)
      x = mycol.delete_many({})
      print("int类型执行结束，集合中共", x.deleted_count, "个文档已清空删除")
      print("\n")

      #输入float类型参数时
      c = dataSampling(float,(0,100),5)
      x = mycol.delete_many({})
      for i in range(5):
          mydict = {'No': 0, 'value': "nu"}
          mydict['No'] = i
          mydict['value'] = next(c)
          temp = mycol.insert_one(mydict)
      print("float类型的生成结果为：")
      for x in mycol.find():  # 输出集合中所有数据
          print(x)
      # 按10到90筛选数据
      myquery = {"value": {"$gt": 10, "$lt": 90}}
      mydoc = mycol.find(myquery)
      cou = mydoc.count()
      if (cou == 0):
          print("未找到满足要求的数据")
      else:
          print("float类型的以10到90为条件的筛选结果为：")
          for x in mydoc:
              print(x)
      x = mycol.delete_many({})
      print("float类型执行结束，集合中共", x.deleted_count, "个文档已清空删除")
      print("\n")

    except Exception as ex:
      print("主函数错误：")
      print(ex)

apply()
